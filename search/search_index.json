{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction-to-information-retrieval","title":"Introduction to Information Retrieval","text":"<p>In this tutorial we'll be using Python. The goals of this workshop are:</p> <ul> <li>Implement Classical and Neural IR approaches for Information Retrieval!</li> <li>Have fun!</li> </ul>"},{"location":"#about-this-tutorial","title":"About this tutorial","text":"<p>The tutorial session is broken down into the following sections:</p> <ul> <li>Boolean Retrieval<ul> <li>Please go through the instructions.</li> </ul> </li> <li>Tf-IDF Retrieval<ul> <li>Please go through the instructions.</li> </ul> </li> <li>BM25  Retrieval</li> <li>BiEncoder Retrieval<ul> <li>Please go through the instructions.</li> </ul> </li> <li>Cross-Encoder Retrieval</li> </ul>"},{"location":"boolean_retrieval/","title":"Overview","text":"<p>This project demonstrates how to build a simple Boolean Retrieval System that allows users to perform AND, OR, and NOT queries on a collection of documents. We use NLTK for stopword removal and regular expressions for query parsing.</p>"},{"location":"boolean_retrieval/#installation","title":"Installation","text":"<p>Make sure you have Python installed, then install the required dependencies:</p> <pre><code>pip install datasets nltk\npython -c \"import nltk; nltk.download('stopwords')\"\n</code></pre> <p>Now, we will develop a Boolean Retriever on BNS sections. Let's import the BooleanRetriever class</p> <pre><code>import sys\nimport os\n\nsys.path.append(os.path.abspath(\"..\"))\nfrom src.BooleanRetriever import BooleanRetrieval\n</code></pre>"},{"location":"boolean_retrieval/#we-will-load-the-retriever-and-the-dataset","title":"We will load the retriever and the dataset","text":"<pre><code>bool_retriever = BooleanRetrieval(\"BNS\")\n</code></pre> <p>Let us print one section</p> <pre><code>print(bool_retriever.dataset[0][\"_id\"])\nprint(bool_retriever.dataset[0][\"text\"])\n</code></pre>"},{"location":"boolean_retrieval/#we-will-build-the-index","title":"We will build the index","text":"<pre><code>bool_retriever.build_index()\n</code></pre> <p>We will print the documents</p> <pre><code>first_key = \"\"\nfor key in bool_retriever.documents:\n    first_key = key\n    break\n\nprint(f\"Key is {first_key}\")\nprint(bool_retriever.documents[first_key])\n</code></pre> <p>We will build the index</p> <pre><code>bool_retriever.build_index()\n\n# Let's see how Inverted Index looks like\nfor each_doc in bool_retriever.inverted_index[\"robbery\"]:\n    print(bool_retriever.documents[each_doc])\n</code></pre>"},{"location":"boolean_retrieval/#we-will-search-using-a-simple-query","title":"We will search using a simple query","text":"<pre><code>search_results = bool_retriever.search(\"robbery AND chain-snatching\")\n\nfor doc_id, content in search_results.items():\n    print(f\"DocID: {doc_id}\\nContent: {content}\\n\")\n</code></pre>"},{"location":"neural_retriever/","title":"Overview","text":"<p>This project demonstrates how to build a Dense Passage Retrieval (DPR) System that allows users to perform queries on a collection of documents.</p>"},{"location":"neural_retriever/#installation","title":"Installation","text":"<p>Make sure you have Python installed, then install the required dependencies:</p> <pre><code>pip install sentence-transformers faiss\n</code></pre> <p>Now, we will develop a Neural Retriever on BNS sections. Let's import the NeuralRetriever class</p> <pre><code>import sys\nimport os\n\nsys.path.append(os.path.abspath(\"..\"))\nfrom src.NeuralRetriever import NeuralRetriever\n</code></pre>"},{"location":"neural_retriever/#we-will-load-the-retriever-and-the-dataset","title":"We will load the retriever and the dataset","text":"<pre><code>retriever = NeuralRetriever(\"intfloat/e5-small-v2\")\n</code></pre> <p>Let us load some documents and them to the retriever class for indexing</p> <pre><code># Let us load the BNS sections\ndef load_md_files(base_folder):\n    md_files_dict = []\n\n    # Iterate through all folders in the base directory\n    for folder in os.listdir(base_folder):\n        folder_path = os.path.join(base_folder, folder)\n\n        # Check if it's a directory\n        if os.path.isdir(folder_path):\n            # Iterate through all .md files in the folder\n            for filename in os.listdir(folder_path):\n                if filename.endswith(\".md\"):\n                    file_path = os.path.join(folder_path, filename)\n\n                    # Open the file and read its contents\n                    with open(file_path, \"r\", encoding=\"utf-8\") as file:\n                        file_contents = file.read()\n\n                    # Store the contents in the dictionary with the key being \"folder/filename\"\n                    temp_doc = {}\n                    temp_doc[\"_id\"] = f\"{folder}/{filename}\"\n                    temp_doc[\"text\"] = file_contents\n                    md_files_dict.append(temp_doc)\n\n    return md_files_dict\n\nbns_data = load_md_files(\"ilab_sdg/\")\n\nfor each_section in bns_data:\n    retriever.add_document(each_section[\"_id\"], each_section[\"text\"])\n\nretriever.build_index()\n</code></pre>"},{"location":"neural_retriever/#we-will-search-using-a-simple-query","title":"We will search using a simple query","text":"<pre><code># Search for a query\nprint(\"Search for 'robbery':\")\nresults = retriever.search(\"robbery\")\nprint(results)\n\n# Get the matching documents\nprint(\"\\nTop matching documents:\")\nfor doc_id, score in results:\n    print(f\"Document {doc_id} (Score: {score:.4f}): {retriever.documents[doc_id]}\")\n</code></pre>"},{"location":"tfidf_retriever/","title":"Overview","text":"<p>This project demonstrates how to build a simple TF-IDF Retrieval System that allows users to perform queries on a collection of documents. We use NLTK for stopword removal and regular expressions for query parsing.</p>"},{"location":"tfidf_retriever/#installation","title":"Installation","text":"<p>Make sure you have Python installed, then install the required dependencies:</p> <pre><code>pip install datasets nltk\npython -c \"import nltk; nltk.download('stopwords')\"\n</code></pre> <p>Now, we will develop a TF-IDF Retriever on BNS sections. Let's import the TFIDFRetriever class</p> <pre><code>import sys\nimport os\n\nsys.path.append(os.path.abspath(\"..\"))\nfrom src.TF_IDFRetriever import TFIDFRetriever\n</code></pre>"},{"location":"tfidf_retriever/#we-will-load-the-retriever-and-the-dataset","title":"We will load the retriever and the dataset","text":"<pre><code>retriever = TFIDFRetriever()\n</code></pre> <p>Let us load some documents and them to the retriever class for indexing</p> <pre><code># Let us load the BNS sections\ndef load_md_files(base_folder):\n    md_files_dict = []\n\n    # Iterate through all folders in the base directory\n    for folder in os.listdir(base_folder):\n        folder_path = os.path.join(base_folder, folder)\n\n        # Check if it's a directory\n        if os.path.isdir(folder_path):\n            # Iterate through all .md files in the folder\n            for filename in os.listdir(folder_path):\n                if filename.endswith(\".md\"):\n                    file_path = os.path.join(folder_path, filename)\n\n                    # Open the file and read its contents\n                    with open(file_path, \"r\", encoding=\"utf-8\") as file:\n                        file_contents = file.read()\n\n                    # Store the contents in the dictionary with the key being \"folder/filename\"\n                    temp_doc = {}\n                    temp_doc[\"_id\"] = f\"{folder}/{filename}\"\n                    temp_doc[\"text\"] = file_contents\n                    md_files_dict.append(temp_doc)\n\n    return md_files_dict\n\nbns_data = load_md_files(\"ilab_sdg/\")\n\nfor each_section in bns_data:\n    retriever.add_document(each_section[\"_id\"], each_section[\"text\"])\n\nretriever.update_index()\n</code></pre>"},{"location":"tfidf_retriever/#we-will-search-using-a-simple-query","title":"We will search using a simple query","text":"<pre><code># Search for a query\nprint(\"Search for 'robbery':\")\nresults = retriever.search(\"robbery\")\nprint(results)\n\n# Get the matching documents\nprint(\"\\nTop matching documents:\")\nfor doc_id, score in results:\n    print(f\"Document {doc_id} (Score: {score:.4f}): {retriever.documents[doc_id]}\")\n</code></pre>"}]}